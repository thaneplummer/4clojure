;; Pascal's triangle is a triangle of numbers computed using the following rules:

;; - The first row is 1.
;; - Each successive row is computed by adding together adjacent numbers in the row above, and adding a 1 to the beginning and end of the row.

;; Write a function which returns the nth row of Pascal's Triangle.

(= (__ 1) [1])

(= (map __ (range 1 6))
   [     [1]
        [1 1]
       [1 2 1]
      [1 3 3 1]
     [1 4 6 4 1]])

(= (__ 11)
   [1 10 45 120 210 252 210 120 45 10 1])

;; Answer: get the next row by summing the elements of the prev row grouped by 2.
(defn ptriangle [n]
  (loop [row 1, prev-row [1]]
    (if (= row n) ; Done?
      prev-row
      (recur (inc row) 
        (concat [1] (map #(+ (first %) (second %)) (partition 2 1 prev-row)) [1])))))
      

; anjensan's solution:
(fn [x] 
  (nth 
    (iterate #(concat [1] (map + % (rest %)) [1]) [1])
    (dec x)))

; austintaylor's solution:
(fn [r]
  (reduce #(cons
    (* (first %1)
       (/ (- r %2) %2))
  %1) [1] (range 1 r)))

; nikelandjelo's solution:
(fn [n]
  (nth (iterate #(vec (map + (cons 0 %) (conj % 0))) [1]) (dec n)))
