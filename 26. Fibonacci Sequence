;; Write a function which returns the first X fibonacci numbers.

(= (__ 3) '(1 1 2))
(= (__ 6) '(1 1 2 3 5 8))
(= (__ 8) '(1 1 2 3 5 8 13 21))

;; Use dec on number with recursive call to function with conj vector (adds to end)

(defn fibr 
    ([x]
        (fibr x '(1 1)))
    ([x v]
    (dec x)
    (if (= 2 x)
        (reverse v)
        (fibr (dec x) (conj v (+ (first v) (second v)))))))

;; Answer
(fn fibr 
    ([x]
        (fibr x '(1 1)))
    ([x v]
    (dec x)
    (if (= 2 x)
        (reverse v)
        (fibr (dec x) (conj v (+ (first v) (second v)))))))
