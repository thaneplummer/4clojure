;; Write a function which returns the first x number of prime numbers.

(= (__ 2) [2 3])
(= (__ 5) [2 3 5 7 11])
(= (last (__ 100)) 541)

;; Answer
(defn primes [n]
  "Seed prime list with 2, and count by 2 from 3 on (lazily), dividing by all previous primes."
  (loop [primelist [2], x 3]
    (if (= n (count primelist))
      primelist   ;  We're done.
      (if (some zero? (map #(mod x %) primelist))
        (recur primelist (+ x 2))
        (recur (conj primelist x) (+ x 2))))))


;; amcnamara's solution:
(fn [n]
  (take n 
    (filter (fn [i] (not-any? #(= 0 (mod i %)) (range 2 i))) (drop 2 (range)))))
    
;; austintaylor's solution:
(fn [n]
  (let [prime (fn [x] (not (some #(zero? (mod x %)) (range 2 x))))]
  (take n (filter prime (iterate inc 2)))))
