;; Given two sequences x and y, calculate the Levenshtein distance of x and y, i. e. the minimum 
;; number of edits needed to transform x into y. The allowed edits are:
;; - insert a single item
;; - delete a single item
;; - replace a single item with another item

;; WARNING: Some of the test cases may timeout if you write an inefficient solution!

(= (__ "kitten" "sitting") 3)
(= (__ "closure" "clojure") (__ "clojure" "closure") 1)
(= (__ "xyx" "xyyyx") 2)
(= (__ "" "123456") 6)
(= (__ "Clojure" "Clojure") (__ "" "") (__ [] []) 0)
(= (__ [1 2 3 4] [0 2 3 4 5]) 2)
(= (__ '(:a :b :c :d) '(:a :d)) 2)
(= (__ "ttttattttctg" "tcaaccctaccat") 10)
(= (__ "gaattctaatctc" "caaacaaaaaattt") 9)

;; First attempt - use simple forward similarity based off of max sequential chars.
;; Much faster than "pure" Levenshtein and should be close. Only passes 6 of 9. (sigh)
;; Aha! A bug -- fixing it makes it pass 8 of 9. OK, rewrite "string/index-of" and it's done.
;; Just use ".indexOf" and get rid of "sortlen" function (inline).


;; Copyright (c) 2019 Thane Plummer. Copying and redistribution 
;; is prohibited without the express permission of the author.

; PASSES 9 of 9!!
(fn simil [s1 s2]
  (let [[s-big s-small] (if (> (count s1) (count s2)) [s1 s2] [s2 s1])]
    (loop [sm (vec s-small), sb (vec s-big), result []]
      (if (zero? (count sm))
        (- (count s-big) (count result))
        (let [y (.indexOf sb (first sm))]
          (if (and y (>= y 0))
            (recur (rest sm) (drop (inc y) sb) (conj result y))
            (recur (rest sm) sb result)
            ))))))


; "kitten" "sitting" => 3
; "closure" "clojure" => 1
; "xyx" "xyyyx" => 2
; "" "123456" => 6
; "Clojure" "Clojure" => 0 (and "" "" => 0 and [] [] => 0)
; [1 2 3 4] [0 2 3 4 5] => 2
; '(:a :b :c :d) '(:a :d) = 4 FAIL (counts colons as chars)
; "ttttattttctg" "tcaaccctaccat" => 4 FAIL v1  10 PASS v2
; "gaattctaatctc" "caaacaaaaaattt" => 4 FAIL 9 PASS v2
