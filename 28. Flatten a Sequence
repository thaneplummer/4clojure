;; From: http://www.4clojure.com/problem/28#prob-title
;; Write a function which flattens a sequence -- WITHOUT using 'flatten'.

(= (__ '((1 2) 3 [4 [5 6]])) '(1 2 3 4 5 6))
(= (__ ["a" ["b"] "c"]) '("a" "b" "c"))
(= (__ '((((:a))))) '(:a))

;; Take element while the remaining list is not empty.

;; Test
user=> (not (empty? '(1)))
true
user=> (not (empty? '()))
false

;; More tests
user=> (def fugly [1 [2 3 [4 5] 6] 7 8 9])
user=> fugly
[1 [2 3 [4 5] 6] 7 8 9]
user=> (coll? fugly)
true

;; The Plan - if first element is sequence/vector
;;                 recursive call with first
;;                 ; else
;;                 take first element and conjugate to vector (adds to last position)
;;                     recursive call with rest
;;                 
;; Use "reduce" to eat list? No!
;; Use "mapcat"
;; (mapcat f & colls)
;; Returns the result of applying concat to the result of applying map
;; to f and colls.  Thus function f should return a collection.

(defn flatn
    [x]
    (if (coll? x)
      (mapcat flatn x)
      [x]))
      
    
