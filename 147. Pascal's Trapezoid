;; Write a function that, for any given input vector of numbers, returns an infinite lazy sequence of vectors, 
;; where each next one is constructed from the previous following the rules used in Pascal's Triangle. 
;; For example, for [3 1 2], the next row is [3 4 3 2].

;; Beware of arithmetic overflow! In clojure (since version 1.3 in 2011), if you use an 
;; arithmetic operator like + and the result is too large to fit into a 64-bit integer, an exception is thrown. 
;; You can use +' to indicate that you would rather overflow into Clojure's slower, arbitrary-precision bigint.


(= (second (__ [2 3 2])) [2 5 5 2])
(= (take 5 (__ [1])) [[1] [1 1] [1 2 1] [1 3 3 1] [1 4 6 4 1]])
(= (take 2 (__ [3 1 2])) [[3 1 2] [3 4 3 2]])
(= (take 100 (__ [2 4 2])) (rest (take 101 (__ [2 2]))))

;; Answer. Yep, had to resort to +' to pass the last test.
(fn ptrapezoid [row]
    (iterate #(concat [(first %)] (map +' % (rest %)) [(last %)]) row))

;; 1067's solution:
(fn tr [acc]
  (lazy-seq 
   (cons acc (tr (mapv +' (cons 0 acc) (conj acc 0))))))

;; adereth's solution:
(fn [row]
  (let [next-row #(map +' (concat [0] %) (concat % [0]))]
    (iterate next-row row)))

;; anjensan's solution:
iterate #(map + `(0 ~@% 0) `(~@% 0))

;; johncowie's solution:
(fn [v] (iterate (fn [s] (map +' (cons 0 s) (conj (vec s) 0))) v))

;; mfikes's solution:
(fn trapezoid [xs]
  (lazy-seq
   (cons xs (trapezoid (mapv +' (conj xs 0) (cons 0 xs))))))

;; nikelandjelo's solution:
(fn [x]
  (iterate (fn [v] (concat
                     [(first v)]
                     (map #(apply + %) (partition 2 1 v))
                     [(last v)]))
    x))

;; amcnamara's solution:
(fn f [c]
  (lazy-seq `(~c ~@(f (map + `(0 ~@c) `(~@c 0))))))
