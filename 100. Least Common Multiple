;; Write a function which calculates the least common multiple. 
;; Your function should accept a variable number of positive integers or ratios.
	

(== (__ 2 3) 6)
(== (__ 5 3 7) 105)
(== (__ 1/3 2/5) 2)
(== (__ 3/4 1/6) 3/2)
(== (__ 7 5/7 2 3/5) 210)


;; Answer: OK, this sucks because of the hard-coded "range 1 500" list will
;; necessarily fail if the LCMs are not found within the range. But it's a start...
;; Alt approach would be to get the set of GCDs and multiply them.
(fn lcm [ & args]
  (apply min
    (reduce clojure.set/intersection
      (for [x args
           :let [y (set (map #(* x %) (range 1 500)))]]
       y))))

;; amcnamara's solution:
(fn f [a & b]
  (loop [i a]
    (if (every? #(zero? (mod i %)) b)
      i
      (recur (+ i a)))))

;; dbyrne's solution: (Very similar to above, except parsing args)
(fn [& x]
  (let [y (apply min x)]
    (loop [z y]
      (if (every? #(zero? (mod z %)) x)
        z
        (recur (+ z y))))))
        
;; nikelandjelo's solution:
(fn lcm [& args]
  (letfn [(gcd [a b]
            (if (zero? b)
              a
              (gcd b (mod a b))))]
    (reduce #(/ (* % %2) (gcd % %2)) args)))

;; jeff_terrell's solution:
(fn [& seq]
  (let [gcd (fn gcd [a b] (cond (= a b) a
                                (< a b) (gcd a (- b a))
                                (> a b) (gcd (- a b) b)))
        abs (fn [x] (if (< x 0) (- x) x))
        lcm (fn [a b] (/ (abs (* a b)) (gcd a b)))]
    (reduce lcm seq)))

;; adereth's solution:
(fn [x & xs]
  (let [multiples (map (partial * x) (rest (range)))]
    (first
     (filter #(every? 
               (fn [y] (zero? (mod % y)))
               xs)
             multiples))))
