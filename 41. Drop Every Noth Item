;; Write a function which drops every Nth item from a sequence.

(= (__ [1 2 3 4 5 6 7 8] 3) [1 2 4 5 7 8])
(= (__ [:a :b :c :d :e :f] 2) [:a :c :e])
(= (__ [1 2 3 4 5 6] 4) [1 2 3 5 6])


;; First try -- close, but not quite. Fails on 1 and 3.
(defn dropnth [coll n] (mapcat butlast (partition-all n coll)))

user=> (dropnth [:a :b :c :d :e :f] 2)
(:a :c :e)

;; Second try -- hack the first by adding a bogus value to the end of input collection.
(defn dropnth [coll n] (let [vcol (conj (vec coll) -1)] (mapcat butlast (partition-all n vcol))))

;; It ain't pretty, but it works!
user=> (dropnth [1 2 3 4 5 6 7 8] 3)
(1 2 4 5 7 8)
user=> (dropnth [1 2 3 4 5 6] 4)
(1 2 3 5 6)

;; (sigh) Hate the hack. Use "for" loop. Fails on [:a :b :c] test...
(defn dropnth
  [coll n]
  (for [x coll
      :let [y x]
      :when (not= 0 (rem x n))]
  y))
  
;; This works, and looks better.
(defn dropnth
  [coll n]
  (let [idx (range (count coll))]
  (for [i idx
      :let [y (nth coll i)]
      :when (not= 0 (rem (inc i) n))]
  y)))
