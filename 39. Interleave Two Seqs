;; Write a function which takes two sequences and returns the first item from each, then the second item from each, then the third, etc.
;; Do NOT use "interleave".

(= (__ [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c))
(= (__ [1 2] [3 4 5 6]) '(1 3 2 4))
(= (__ [1 2 3 4] [5]) [1 5])
(= (__ [30 20] [25 15]) [30 25 20 15])

;; Answer - first attempt. Ugh. Not quite.
(fn [x y] (for [i (range (min (count x) (count y)))] (vector (nth x i) (nth y i))))

;; Zip to a map and then concat?
user=> (mapcat seq (zipmap [1 2 3] [:a :b :c]))
(1 :a 2 :b 3 :c)
user=> (apply concat (zipmap [1 2 3] [:a :b :c]))
(1 :a 2 :b 3 :c)

(defn myin [x y] (mapcat seq (zipmap x y)))
(fn [x y] (apply concat (zipmap x y)))

;; Failing unit tests, but why?
user=> (= (myin [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c))
true
user=> (= ((fn [x y] (apply concat (zipmap x y))) [1 2 3] [:a :b :c]) '(1 :a 2 :b 3 :c))
true

;; Steal code from zipmap
(defn ziplist
[keys vals]
    (loop [vec []
           ks (seq keys)
           vs (seq vals)]
      (if (and ks vs)
        (recur (conj vec (first ks) (first vs))
               (next ks)
               (next vs))
vec)))

;; OK, this passes the tests.
(fn [keys vals] (loop [vec [] ks (seq keys) vs (seq vals)] (if (and ks vs) (recur (conj vec (first ks) (first vs)) (next ks) (next vs)) vec)))
